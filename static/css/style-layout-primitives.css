/* ==========================================================================
   LAYOUT PRIMITIVES
   ========================================================================== */

/* EVERY LAYOUT: Stack
   ========================================================================== */

   .stack {
      display: flex;
      flex-direction: column;
      justify-content: flex-start;
   }
   
   .stack * {
      margin-block: 0;
   } 
   
   .stack * + * {
      margin-block-start: var(--space, var(--space-s));
   }
   
   .stack-small > * + * {
     margin-block-end: 0.5rem;
   }
   
   .stack-exception,
   .stack-exception + * {
     margin-block: 0;
     margin-block-start: 0;
   }
   
   /* EVERY LAYOUT: Center
      ========================================================================== */
   
   .center {
      box-sizing: content-box;
      margin-inline: auto;
      max-inline-size: var(--measure);
   }
   
   .center-test {
      box-sizing: content-box;
      margin-inline: auto;
   }
   
      .center-test > * {
         width: 100%;
         max-width: var(--measure);
      }
   
   /* EVERY LAYOUT: Cluster
      ========================================================================== */
   
   .cluster {
      display: flex;
      flex-wrap: wrap;
      gap: var(--space-s, 1rem);
      justify-content: flex-start;
      align-items: center;
    }
   
    /* EVERY LAYOUT: Grid
      ========================================================================== */
   
      .grid {
         display: grid;
         grid-gap: var(--grid-gutter);
       }
   
       .grid > * {
         margin-block: 0;
         margin-block-start: 0;
       }
       
       @supports (width: min(400px, 100%)) {
         .grid {
           grid-template-columns: repeat(auto-fit, minmax(min(400px, 100%), 1fr));
         }
       }
   
   /* EVERY LAYOUT: Multicolumn List
      ========================================================================== */
   
   .multicolumn-list ol,
   .multicolumn-list ul {
      columns: 2;
      column-gap: 1rem;
   }
      
   .multicolumn-list li {
      column-span: all;
   }
      
   .multicolumn-list li:nth-last-child(n+5), 
   .multicolumn-list li:nth-last-child(n+5) ~ * {
      column-span: none;
   }
   
   /* EVERY LAYOUT: Multicolumn Grid
      ========================================================================== */
   
   .multicolumn-grid {
      columns: 2;
      column-gap: 1rem;
   }
      
   .multicolumn-grid > * {
      column-span: all;
      width: 100%;
   }
   
   .multicolumn-grid > *:nth-last-child(n+6), 
   .multicolumn-grid > *:nth-last-child(n+6) ~ * {
      column-span: none;
   }
         
   /* EVERY LAYOUT: Switcher
      ========================================================================== */
   
      /*
      .switcher {
         display: flex;
         flex-wrap: wrap;
         gap: 1rem;
         --threshold: 30rem;
       }
       
       .switcher > * {
         flex-grow: 1;
         flex-basis: calc((var(--threshold) - 100%) * 999);
       }
       */
   
       .switcher {
         display: flex;
         flex-wrap: wrap;
         gap: 1rem;
         /*gap: var(--space-s);*/
       }
       
       .switcher > * {
         flex-grow: 1;
         flex-basis: calc((30rem - 100%) * 999);
       }
       
       
       .switcher > :nth-last-child(n+ 3),
       .switcher > :nth-last-child(n+ 3) ~ * {
         flex-basis: 100%;
       } 
   
    /* EVERY LAYOUT: Frame
      ========================================================================== */
   
    .frame {
      --n: 16;
      --d: 9;
      aspect-ratio: var(--n) / var(--d);
      overflow: hidden;
      display: flex;
      justify-content: center;
      align-items: center;
    }
    
    .frame > img,
    .frame > video {
      inline-size: 100%;
      block-size: 100%;
      object-fit: cover;
    }
   
    /* EVERY LAYOUT: Frame
      ========================================================================== */
   
    .box {
      padding: var(--space-s);
      border: 0 solid;
      outline: var(--border-thin) solid transparent;
      outline-offset: calc(var(--border-thin) * -1);
    }
    
    .box * {
      color: inherit;
    }
